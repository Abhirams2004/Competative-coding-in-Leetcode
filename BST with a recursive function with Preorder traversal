class BST:
    class Node:
        def __init__(self,data):
            self.data=data
            self.left=None
            self.right=None
     #BST initialization       
    def __init__(self):
        self.root=None

    # Insert a new node without recursion
    def insert(self, data):
        new_node=BST.Node(data)
        if self.root is None:
            self.root=new_node
            return

        current=self.root
        while True:
            if data<current.data:
                if current.left is None:
                    current.left=new_node
                    break
                else:
                    current=current.left
            else:
                if current.right is None:
                    current.right=new_node
                    break
                else:
                    current=current.right
    def in_order_traversal(self,node):
        if node:
            self.in_order_traversal(node.left)
            print(node.data,end='  ')
            self.in_order_traversal(node.right)
    def pr(self,node):
        if node:
            print(node.data,end=' ')
            self.pr(node.left)
            self.pr(node.right)
    def post(self,node):
        if node:
            self.post(node.left)
            self.post(node.right)
            print(node.data,end=' ')
    def search(self,key):
        current=self.root
        while current:
            if key==current.data:
                return True
                break
            elif key<current.data:
                current=current.left
            else:
                current=current.right
        return False
